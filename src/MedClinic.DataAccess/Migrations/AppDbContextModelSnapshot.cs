// <auto-generated />
using System;
using MedClinic.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MedClinic.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MedClinic.Domain.Entities.Beds.Bed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsBusy")
                        .HasColumnType("boolean")
                        .HasColumnName("is_busy");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid")
                        .HasColumnName("room_id");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("bed", (string)null);
                });

            modelBuilder.Entity("MedClinic.Domain.Entities.DoctorProfits.DoctorProfit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("doctor_profit", (string)null);
                });

            modelBuilder.Entity("MedClinic.Domain.Entities.DoctorRooms.DoctorRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("doctor_room", (string)null);
                });

            modelBuilder.Entity("MedClinic.Domain.Entities.Doctors.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("BedPercentage")
                        .HasColumnType("integer")
                        .HasColumnName("bed_percentage");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("DoctorRoomId")
                        .HasColumnType("uuid")
                        .HasColumnName("doctor_room_id");

                    b.Property<Guid>("HospitalServiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("hospital_service_id");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text")
                        .HasColumnName("image_path");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("text")
                        .HasColumnName("password_salt");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uuid")
                        .HasColumnName("position_id");

                    b.Property<Guid>("PostionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<double>("Salary")
                        .HasColumnType("double precision")
                        .HasColumnName("salary");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("DoctorRoomId");

                    b.HasIndex("HospitalServiceId");

                    b.HasIndex("PositionId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("doctor", (string)null);
                });

            modelBuilder.Entity("MedClinic.Domain.Entities.FirstViewOrders.FirstViewOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid")
                        .HasColumnName("doctor_id");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid")
                        .HasColumnName("patient_id");

                    b.Property<int>("Queue")
                        .HasColumnType("integer")
                        .HasColumnName("queue");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("first_view_order", (string)null);
                });

            modelBuilder.Entity("MedClinic.Domain.Entities.HospitalServices.HospitalService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("hospital_service", (string)null);
                });

            modelBuilder.Entity("MedClinic.Domain.Entities.LaboratoryServices.LaboratoryService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("HospitalServiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("hospital_service_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_at");

                    b.HasKey("Id");

                    b.HasIndex("HospitalServiceId");

                    b.ToTable("laboratory_service", (string)null);
                });

            modelBuilder.Entity("MedClinic.Domain.Entities.Orders.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("BedNumber")
                        .HasColumnType("integer")
                        .HasColumnName("bed_number");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<double>("DatePrice")
                        .HasColumnType("double precision")
                        .HasColumnName("date_price");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid")
                        .HasColumnName("doctor_id");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<Guid>("HospitalServiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("hospital_service_id");

                    b.Property<bool>("IsPercentage")
                        .HasColumnType("boolean")
                        .HasColumnName("is_persentage");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid")
                        .HasColumnName("patient_id");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid")
                        .HasColumnName("room_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<double?>("TotalPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("total_price");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("HospitalServiceId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RoomId");

                    b.ToTable("order", (string)null);
                });

            modelBuilder.Entity("MedClinic.Domain.Entities.Patients.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("patient", (string)null);
                });

            modelBuilder.Entity("MedClinic.Domain.Entities.PayDesks.PayDesk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<double>("Expense")
                        .HasColumnType("double precision")
                        .HasColumnName("expense");

                    b.Property<double>("Income")
                        .HasColumnType("double precision")
                        .HasColumnName("income");

                    b.Property<Guid>("ReceptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("reception_id");

                    b.HasKey("Id");

                    b.HasIndex("ReceptionId");

                    b.ToTable("pay_desk", (string)null);
                });

            modelBuilder.Entity("MedClinic.Domain.Entities.Positions.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("position", (string)null);
                });

            modelBuilder.Entity("MedClinic.Domain.Entities.Roles.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("MedClinic.Domain.Entities.Rooms.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid")
                        .HasColumnName("status_id");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("room", (string)null);
                });

            modelBuilder.Entity("MedClinic.Domain.Entities.Statuses.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("status", (string)null);
                });

            modelBuilder.Entity("MedClinic.Domain.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birth_date");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("MedClinic.Domain.Entities.Beds.Bed", b =>
                {
                    b.HasOne("MedClinic.Domain.Entities.Rooms.Room", "Room")
                        .WithMany("Beds")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("MedClinic.Domain.Entities.DoctorProfits.DoctorProfit", b =>
                {
                    b.HasOne("MedClinic.Domain.Entities.Orders.Order", "Order")
                        .WithMany("DoctorProfits")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("MedClinic.Domain.Entities.Doctors.Doctor", b =>
                {
                    b.HasOne("MedClinic.Domain.Entities.DoctorRooms.DoctorRoom", "DoctorRoom")
                        .WithMany("Doctors")
                        .HasForeignKey("DoctorRoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedClinic.Domain.Entities.HospitalServices.HospitalService", "HospitalService")
                        .WithMany("Doctors")
                        .HasForeignKey("HospitalServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedClinic.Domain.Entities.Positions.Position", "Position")
                        .WithMany("Doctors")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedClinic.Domain.Entities.Roles.Role", "Role")
                        .WithMany("Doctors")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedClinic.Domain.Entities.Users.User", "User")
                        .WithOne("Doctor")
                        .HasForeignKey("MedClinic.Domain.Entities.Doctors.Doctor", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DoctorRoom");

                    b.Navigation("HospitalService");

                    b.Navigation("Position");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedClinic.Domain.Entities.FirstViewOrders.FirstViewOrder", b =>
                {
                    b.HasOne("MedClinic.Domain.Entities.Doctors.Doctor", "Doctor")
                        .WithMany("FirstViewOrders")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedClinic.Domain.Entities.Patients.Patient", "Patient")
                        .WithMany("FirstViewsOrders")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedClinic.Domain.Entities.LaboratoryServices.LaboratoryService", b =>
                {
                    b.HasOne("MedClinic.Domain.Entities.HospitalServices.HospitalService", "HospitalService")
                        .WithMany("LaboratoryServices")
                        .HasForeignKey("HospitalServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("HospitalService");
                });

            modelBuilder.Entity("MedClinic.Domain.Entities.Orders.Order", b =>
                {
                    b.HasOne("MedClinic.Domain.Entities.Doctors.Doctor", "Doctor")
                        .WithMany("Orders")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedClinic.Domain.Entities.HospitalServices.HospitalService", "HospitalService")
                        .WithMany("Orders")
                        .HasForeignKey("HospitalServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedClinic.Domain.Entities.Patients.Patient", "Patient")
                        .WithMany("Orders")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedClinic.Domain.Entities.Rooms.Room", "Room")
                        .WithMany("Orders")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("HospitalService");

                    b.Navigation("Patient");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("MedClinic.Domain.Entities.Patients.Patient", b =>
                {
                    b.HasOne("MedClinic.Domain.Entities.Users.User", "User")
                        .WithOne("Patient")
                        .HasForeignKey("MedClinic.Domain.Entities.Patients.Patient", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedClinic.Domain.Entities.PayDesks.PayDesk", b =>
                {
                    b.HasOne("MedClinic.Domain.Entities.Doctors.Doctor", "Reception")
                        .WithMany("PayDesks")
                        .HasForeignKey("ReceptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Reception");
                });

            modelBuilder.Entity("MedClinic.Domain.Entities.Rooms.Room", b =>
                {
                    b.HasOne("MedClinic.Domain.Entities.Statuses.Status", "Status")
                        .WithMany("Rooms")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("MedClinic.Domain.Entities.DoctorRooms.DoctorRoom", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("MedClinic.Domain.Entities.Doctors.Doctor", b =>
                {
                    b.Navigation("FirstViewOrders");

                    b.Navigation("Orders");

                    b.Navigation("PayDesks");
                });

            modelBuilder.Entity("MedClinic.Domain.Entities.HospitalServices.HospitalService", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("LaboratoryServices");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("MedClinic.Domain.Entities.Orders.Order", b =>
                {
                    b.Navigation("DoctorProfits");
                });

            modelBuilder.Entity("MedClinic.Domain.Entities.Patients.Patient", b =>
                {
                    b.Navigation("FirstViewsOrders");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("MedClinic.Domain.Entities.Positions.Position", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("MedClinic.Domain.Entities.Roles.Role", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("MedClinic.Domain.Entities.Rooms.Room", b =>
                {
                    b.Navigation("Beds");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("MedClinic.Domain.Entities.Statuses.Status", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("MedClinic.Domain.Entities.Users.User", b =>
                {
                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });
#pragma warning restore 612, 618
        }
    }
}
